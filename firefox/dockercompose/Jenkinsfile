pipeline {
    agent any
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages {
        stage('Git-CheckOut') {
            steps {
                git 'https://github.com/anuja2015/DevOps2025Project01-Jenkins-DockerCompose.git'
            }
        }
        stage('OWASP-Depenedency-Check') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableNodeAudit', odcInstallation: 'dependencyCheck'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('SonarQube-Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=VirtualBrowser \
                    -Dsonar.projectName=VirtualBrowser '''
                }
            }
        }
        stage('Build-and-Tag-Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        dir('/var/jenkins_home/workspace/virtual-browser/.docker/firefox/') {
                            sh 'docker build -t armdevu/virtualbrowser-firefox:latest .'
                        }
                    }       
                }
            }
        }
        stage('Trivy-Image-scan') {
            steps {
                    sh 'trivy image armdevu/virtualbrowser-firefox:latest'
                
            }
        }
        stage('Push-Docker-Image') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh 'docker push armdevu/virtualbrowser-firefox:latest'
                    }       
                }
            }
        }
        stage('Deploy-docker-compose'){
            steps{
                dir('/var/jenkins_home/workspace/virtual-browser-firefox/firefox/dockercompose/') {
                    sh 'docker compose up -d'
                }
                
            }
        }
    }
}
